(1) 보드판 구현 및 출력
 보드판을 여러 함수 내에서 제한없이 접근할 수 있고, 마커를 쌓을 수 있도록 전역변수 char 배열로 선언. 여러번 보드판을 출력할 수 있도록 Show_board 함수를 만들어 사용.(이중 for문을 통해 printf함수를 활용하여 배열요소들을 하나씩 출력하여 보드판을 출력)

(2) 세로줄 번호 받기
  Enter_column_num 함수를 통해서 세로줄 번호를 입력받고, 기본적인 메시지들(어떤 플레이어의 순서인지, p1과 p2의 마커는 무엇인지)을 출력. 마커쌓기 함수와 연계하기 위해 세로줄 번호를 반환.

(3) 세로줄 오류 감지
  플레이어가 더 이상 마커를 받을 수 없는 세로줄을 선택했을 때(세로줄이 꽉 찼을 때)를 대비하여 다른 세로줄 번호를 선택할 수 있도록 Full_check 함수 사용. 매개변수로 세로줄 번호를 받고 switch문으로 8개의 세로줄 번호로 나눠 1번째 행의 각 세로줄 번호에 해당하는 배열요소가 마커로 쌓였는지를 판단. 꽉 찼을 경우 에러메시지 출력

(4) 보드에 마커 쌓기(그리기)
  Draw_mark함수를 활용해서 보드판에 마커를 그린다.. Draw_mark는 처음에는 Enter_column_num 함수를 호출해 세로줄 번호를 매개변수로 받고 Full_check 함수를 통해 세로줄의 꽉참 여부를 검사하고 꽉차지 않은 세로줄 번호를 고를 때까지 세로줄 번호를 받는 것을 반복한다.

  꽉 차지 않은 세로줄 번호를 골랐을 때는 몇 번째 행까지 마커가 쌓였는지를 기록해두는 변수로 미리 전역변수로 선언 및 6으로 초기화를 거친 8개의  columnX_row(X=1~8) 변수를 통해서 마커를 배열에 넣는다. 이때 플레이어의 순서를 정하는데 사용하기 위해 전역변수로 선언 및 1로 초기화된 변수 i를 이용해 플레이어마다 다른 마커를 넣는다.

(5) 승패 판단
  승패를 판단하기 위해서 승리를 4가지 경우로 나눈다.
  1) 세로 승리
  2) 가로 승리
  3) 대각선 승리(/방향)
  4) 대각선 승리(\방향)
  승리를 판단하는 기본 메커니즘은 모두 같다. 4가지 경우의 각 방향으로 배열의 요소 4개가 연속된 같은 마크로 되어있는지 이중 for문을 돌며 검사한다. 4개가 연속적으로 같은 마크임을 확인하면 for문을 탈출하고, 지역변수로 선언해둔 p1win, p2win 변수를 통해 어떤 플레이어가 이겼는지 검사하고 값을 반환하면서 함수를 종료.


(6) 무승부 판단
  Tie_check 함수를 통해 무승부를 판단한다. Tie_check 함수는 board 판 배열과 같은 크기인 temp 배열을 선언하여 현재 보드 상태를 저장한다. 
이중 for문을 돌며 보드판 배열의 마크가 놓일 부분 중에서 아직 마크가 채워지지 않는 부분을(‘_’) p1의 마크로 전부 채우고 승패 판단 함수를 호출한다. 그리고 지역변수로 선언해둔 p1win 변수에 승패 판단 함수의 반환값을 저장한다.
처음에 보드 상태를 저장해둔 temp 배열을 사용해 이중for 문을 통해 보드판 배열을 원상복구 해준다. 그 다음 p2 마크로 같은 과정을 반복한다.
if문으로 p1win p2win 변수를 통해서 둘 다 승패를 가리지 못할 때 무승부 메시지를 출력하면서 값을 반환하고 함수를 종료.

(7) 게임 확장
  For_initialization 함수를 통해 처음 게임 환경을 만든다. 마커 그리기와 거의 유사한 방식으로 플레이어가 0을 누를 때까지 세로줄 번호를 받고 배열요소를 X로 채운다. Full_check함수도 사용하여 X마크로 꽉 찼는지 확인하고 다른 세로줄 번호를 입력하도록 한다. 

(8) 프로그램 운영 (main 함수)
  무한반복문을 2개를 둔다. 처음 무한 반복문은 본격적인 게임을 시작하기 전 For_initialization 함수를 반복 호출해서 게임 환경을 만들고 플레이어가 0을 입력하면 이 반복문을 탈출한다.
그 다음 Show_board함수를 통해 만들어 둔 보드판을 출력해주고 For_initialization 함수를 통한 게임 환경 초기화에서 무승부가 나오는지 무승부 판단 함수를 통해 판단한다.
그 후 두 번째 무한반복문을 둬서 마크그리기, 보드판 출력, 승패,무승부 판단, 플레이어 순서 구분 전역변수 i를 1 증가하기의 과정을 반복하고 승패 무승부가 판단되면 프로그램을 종료.