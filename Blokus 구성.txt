(1) 게임판 구현 및 출력
  Show_board 함수를 통해 게임판을 출력. 게임판은 어떤 함수에서도 접근할 수 있도록 char 배열로 전역변수 선언. Show_board 함수에서는 이중for문을 통해 배열요소들을 하나하나 모두 출력하여 전체적인 게임판들을 출력한다

(2) 블록 랜덤 생성
  난수생성 함수로 만들어진 난수(0~13)을 Select_block 함수의 매개변수에 전달한다.
Select_block 함수에는 static 변수로 선언된 int형 3차원 배열이 14개의 블록을 나타내며 매개변수로 전달된 난수에 따라 랜덤한 블록을 전역변수로 선언된 2차원 배열 block_frame에 플레이어에 맞는 마크를 넣는다. 끝으로 block_frame에 만들어진 블록을 플레이어 순서를 알려주는 메시지와 함께 이중for문을 통해 출력한다.

(3) 블록 회전
  rotate 함수를 통해 블록을 회전한다. temp 배열을 선언하여 block_frame에 저장된 블록을 기준으로 회전한 블록을 저장하고 이것을 다시 block_frame 배열에 대입하여 회전한 블록을 출력한다.

(4) 블록 놓기
  Set_block 함수를 통해서 블록을 게임판에 놓는다.
플레이어가 좌표를 입력하는데 0을 입력하면 좌표를 입력하지 않고 회전하는 것이기 때문에 scanf함수로 숫자 1개를 먼저 입력받는다. 이 첫 숫자가 0일 경우 0이 나오지 않을 때까지 rotate 함수를 활용해 회전을 시켜주고 다시 숫자를 받는다. 0이 아닌 수가 나오면 다음 좌표를 받아준다.
  이 받은 좌표를 각각 변수 r,c에 저장하고 이를 바탕으로 게임판 배열요소와 block_frame 배열요소에 접근하여 블록을 놓는다. 여기서 유의해야할 점은 블록을 놓을 수 없는 위치를 플레이어가 선택했을 경우, 오류메시지를 출력해야한다는 것이다. 블록을 놓을 수 없는 경우는 2가지가 있다.
   (1) 게임판 배열 내에서 block_frame에서 마커가 있는 부분과 게임판에서 이미 마커가 있는 부분이 겹치는 경우. (이미 마커가 있는 공간 선택)
   (2) block_frame이 게임판 배열의 크기를 벗어나면서 벗어나는 구역에 마커가 있는 경우 
if문을 통해 block_frame 배열과 게임판 배열을 돌며 2가지 경우를 검사하고 블록을 놓을 수 없는 위치임이 드러나면 오류메시지를 출력 do while 문을 통해 좌표를 입력 받는 것부터 다시 반복해준다. 문제가 없는 좌표를 선택했을 경우 block_frame에 저장된 블록을 게임판에 저장하여 블록을 놓는다.






(5) 승패 판정
  Win_or_Lose 함수로 판정 
승패를 판정하는 기준은 부여받은 블록을  회전을 고려하여 게임판 배열 블록 좌측 상단을 기준으로 9*9 81칸 어디에도 놓을 수 없다는 것이다. 
for문을 이용해서 81칸에 하나하나 접근 하면서 위의 블록 놓기가 불가능한 경우 if문으로 확인한다. 이 불가능한 경우를 카운트 해줄 변수 n을 선언하고 불가능한 경우 n++;를 수행해준다. 그 후 회전을 고려하기 위해 block_frame을 반시계방향으로 회전시켜준다. 이 과정을 while문을 통해 4번 반복해준다. 이 과정을 거치면 회전을 고려하여 블록 놓을 자리를 총 4번 검사하게 되고 block_frame은 원래대로 돌아오게 된다.
  마지막으로 카운팅용 변수였던 n이 81*4가 된다면 블록의 회전을 고려했을 때 모든 자리에서 블록 놓기가 불가능 해지는 것이므로 플레이어 순서 구분 변수로 전역변수로 선언된 k값에 따라 승패 메시지를 출력하고 반환값을 반환한 뒤 함수 종료 

(6) 전체적인 프로그램 운영(main 함수)
  프로램이 처음 시작했을 때 난수 seed를 초기화 해준다. 그 다음 게임판 보여주기, 난수 생성, 블록 랜덤 선택, 블록 놓기, 승패 판정, 플레이어 순서 구분 변수값 증가의 과정을 무한 반복문으로 반복해주고 승패판정에서 승패 판정이 난다면 함수를 종료하는 방식으로 프로그램을 운영한다.